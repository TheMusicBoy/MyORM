// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_object.proto

#include "test_object.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR TestObjectSpec_Configuration::TestObjectSpec_Configuration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timeout_seconds_)*/0
  , /*decltype(_impl_.enable_notifications_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestObjectSpec_ConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestObjectSpec_ConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestObjectSpec_ConfigurationDefaultTypeInternal() {}
  union {
    TestObjectSpec_Configuration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestObjectSpec_ConfigurationDefaultTypeInternal _TestObjectSpec_Configuration_default_instance_;
PROTOBUF_CONSTEXPR TestObjectSpec::TestObjectSpec(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tags_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.config_)*/nullptr
  , /*decltype(_impl_.priority_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestObjectSpecDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestObjectSpecDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestObjectSpecDefaultTypeInternal() {}
  union {
    TestObjectSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestObjectSpecDefaultTypeInternal _TestObjectSpec_default_instance_;
PROTOBUF_CONSTEXPR TestObjectStatus::TestObjectStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.progress_percentage_)*/0
  , /*decltype(_impl_.last_updated_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestObjectStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestObjectStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestObjectStatusDefaultTypeInternal() {}
  union {
    TestObjectStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestObjectStatusDefaultTypeInternal _TestObjectStatus_default_instance_;
PROTOBUF_CONSTEXPR TestObject::TestObject(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.spec_)*/nullptr
  , /*decltype(_impl_.status_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestObjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestObjectDefaultTypeInternal() {}
  union {
    TestObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestObjectDefaultTypeInternal _TestObject_default_instance_;
static ::_pb::Metadata file_level_metadata_test_5fobject_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_test_5fobject_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_test_5fobject_2eproto = nullptr;

const uint32_t TableStruct_test_5fobject_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TestObjectSpec_Configuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TestObjectSpec_Configuration, _impl_.timeout_seconds_),
  PROTOBUF_FIELD_OFFSET(::TestObjectSpec_Configuration, _impl_.enable_notifications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TestObjectSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TestObjectSpec, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::TestObjectSpec, _impl_.description_),
  PROTOBUF_FIELD_OFFSET(::TestObjectSpec, _impl_.priority_),
  PROTOBUF_FIELD_OFFSET(::TestObjectSpec, _impl_.tags_),
  PROTOBUF_FIELD_OFFSET(::TestObjectSpec, _impl_.config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TestObjectStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TestObjectStatus, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::TestObjectStatus, _impl_.message_),
  PROTOBUF_FIELD_OFFSET(::TestObjectStatus, _impl_.last_updated_),
  PROTOBUF_FIELD_OFFSET(::TestObjectStatus, _impl_.progress_percentage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TestObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TestObject, _impl_.spec_),
  PROTOBUF_FIELD_OFFSET(::TestObject, _impl_.status_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::TestObjectSpec_Configuration)},
  { 8, -1, -1, sizeof(::TestObjectSpec)},
  { 19, -1, -1, sizeof(::TestObjectStatus)},
  { 29, -1, -1, sizeof(::TestObject)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_TestObjectSpec_Configuration_default_instance_._instance,
  &::_TestObjectSpec_default_instance_._instance,
  &::_TestObjectStatus_default_instance_._instance,
  &::_TestObject_default_instance_._instance,
};

const char descriptor_table_protodef_test_5fobject_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021test_object.proto\032\021object_base.proto\032 "
  "google/protobuf/descriptor.proto\"\330\001\n\016Tes"
  "tObjectSpec\022\014\n\004name\030\001 \001(\t\022\023\n\013description"
  "\030\002 \001(\t\022\020\n\010priority\030\003 \001(\005\022\014\n\004tags\030\004 \003(\t\022-"
  "\n\006config\030\005 \001(\0132\035.TestObjectSpec.Configur"
  "ation\032F\n\rConfiguration\022\027\n\017timeout_second"
  "s\030\001 \001(\005\022\034\n\024enable_notifications\030\002 \001(\010:\014\220"
  "\265\030\001\232\265\030\004spec\"\330\001\n\020TestObjectStatus\022&\n\005stat"
  "e\030\001 \001(\0162\027.TestObjectStatus.State\022\017\n\007mess"
  "age\030\002 \001(\t\022\024\n\014last_updated\030\003 \001(\003\022\033\n\023progr"
  "ess_percentage\030\004 \001(\005\"H\n\005State\022\013\n\007UNKNOWN"
  "\020\000\022\013\n\007PENDING\020\001\022\n\n\006ACTIVE\020\002\022\r\n\tCOMPLETED"
  "\020\003\022\n\n\006FAILED\020\004:\016\220\265\030\001\232\265\030\006status\"q\n\nTestOb"
  "ject\022\035\n\004spec\030\002 \001(\0132\017.TestObjectSpec\022!\n\006s"
  "tatus\030\003 \001(\0132\021.TestObjectStatus:!\202\265\030\035\n\nTe"
  "stObject\022\013test_object \001(\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_test_5fobject_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_object_5fbase_2eproto,
};
static ::_pbi::once_flag descriptor_table_test_5fobject_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_test_5fobject_2eproto = {
    false, false, 633, descriptor_table_protodef_test_5fobject_2eproto,
    "test_object.proto",
    &descriptor_table_test_5fobject_2eproto_once, descriptor_table_test_5fobject_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_test_5fobject_2eproto::offsets,
    file_level_metadata_test_5fobject_2eproto, file_level_enum_descriptors_test_5fobject_2eproto,
    file_level_service_descriptors_test_5fobject_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_test_5fobject_2eproto_getter() {
  return &descriptor_table_test_5fobject_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_test_5fobject_2eproto(&descriptor_table_test_5fobject_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestObjectStatus_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_test_5fobject_2eproto);
  return file_level_enum_descriptors_test_5fobject_2eproto[0];
}
bool TestObjectStatus_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TestObjectStatus_State TestObjectStatus::UNKNOWN;
constexpr TestObjectStatus_State TestObjectStatus::PENDING;
constexpr TestObjectStatus_State TestObjectStatus::ACTIVE;
constexpr TestObjectStatus_State TestObjectStatus::COMPLETED;
constexpr TestObjectStatus_State TestObjectStatus::FAILED;
constexpr TestObjectStatus_State TestObjectStatus::State_MIN;
constexpr TestObjectStatus_State TestObjectStatus::State_MAX;
constexpr int TestObjectStatus::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class TestObjectSpec_Configuration::_Internal {
 public:
};

TestObjectSpec_Configuration::TestObjectSpec_Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TestObjectSpec.Configuration)
}
TestObjectSpec_Configuration::TestObjectSpec_Configuration(const TestObjectSpec_Configuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestObjectSpec_Configuration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timeout_seconds_){}
    , decltype(_impl_.enable_notifications_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.timeout_seconds_, &from._impl_.timeout_seconds_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.enable_notifications_) -
    reinterpret_cast<char*>(&_impl_.timeout_seconds_)) + sizeof(_impl_.enable_notifications_));
  // @@protoc_insertion_point(copy_constructor:TestObjectSpec.Configuration)
}

inline void TestObjectSpec_Configuration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timeout_seconds_){0}
    , decltype(_impl_.enable_notifications_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestObjectSpec_Configuration::~TestObjectSpec_Configuration() {
  // @@protoc_insertion_point(destructor:TestObjectSpec.Configuration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestObjectSpec_Configuration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TestObjectSpec_Configuration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestObjectSpec_Configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:TestObjectSpec.Configuration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timeout_seconds_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.enable_notifications_) -
      reinterpret_cast<char*>(&_impl_.timeout_seconds_)) + sizeof(_impl_.enable_notifications_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestObjectSpec_Configuration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 timeout_seconds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timeout_seconds_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable_notifications = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.enable_notifications_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestObjectSpec_Configuration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestObjectSpec.Configuration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 timeout_seconds = 1;
  if (this->_internal_timeout_seconds() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_timeout_seconds(), target);
  }

  // bool enable_notifications = 2;
  if (this->_internal_enable_notifications() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_enable_notifications(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestObjectSpec.Configuration)
  return target;
}

size_t TestObjectSpec_Configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestObjectSpec.Configuration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 timeout_seconds = 1;
  if (this->_internal_timeout_seconds() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timeout_seconds());
  }

  // bool enable_notifications = 2;
  if (this->_internal_enable_notifications() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestObjectSpec_Configuration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestObjectSpec_Configuration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestObjectSpec_Configuration::GetClassData() const { return &_class_data_; }


void TestObjectSpec_Configuration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestObjectSpec_Configuration*>(&to_msg);
  auto& from = static_cast<const TestObjectSpec_Configuration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestObjectSpec.Configuration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timeout_seconds() != 0) {
    _this->_internal_set_timeout_seconds(from._internal_timeout_seconds());
  }
  if (from._internal_enable_notifications() != 0) {
    _this->_internal_set_enable_notifications(from._internal_enable_notifications());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestObjectSpec_Configuration::CopyFrom(const TestObjectSpec_Configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestObjectSpec.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestObjectSpec_Configuration::IsInitialized() const {
  return true;
}

void TestObjectSpec_Configuration::InternalSwap(TestObjectSpec_Configuration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestObjectSpec_Configuration, _impl_.enable_notifications_)
      + sizeof(TestObjectSpec_Configuration::_impl_.enable_notifications_)
      - PROTOBUF_FIELD_OFFSET(TestObjectSpec_Configuration, _impl_.timeout_seconds_)>(
          reinterpret_cast<char*>(&_impl_.timeout_seconds_),
          reinterpret_cast<char*>(&other->_impl_.timeout_seconds_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestObjectSpec_Configuration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fobject_2eproto_getter, &descriptor_table_test_5fobject_2eproto_once,
      file_level_metadata_test_5fobject_2eproto[0]);
}

// ===================================================================

class TestObjectSpec::_Internal {
 public:
  static const ::TestObjectSpec_Configuration& config(const TestObjectSpec* msg);
};

const ::TestObjectSpec_Configuration&
TestObjectSpec::_Internal::config(const TestObjectSpec* msg) {
  return *msg->_impl_.config_;
}
TestObjectSpec::TestObjectSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TestObjectSpec)
}
TestObjectSpec::TestObjectSpec(const TestObjectSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestObjectSpec* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){from._impl_.tags_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.config_){nullptr}
    , decltype(_impl_.priority_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_config()) {
    _this->_impl_.config_ = new ::TestObjectSpec_Configuration(*from._impl_.config_);
  }
  _this->_impl_.priority_ = from._impl_.priority_;
  // @@protoc_insertion_point(copy_constructor:TestObjectSpec)
}

inline void TestObjectSpec::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tags_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.config_){nullptr}
    , decltype(_impl_.priority_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestObjectSpec::~TestObjectSpec() {
  // @@protoc_insertion_point(destructor:TestObjectSpec)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestObjectSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tags_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.config_;
}

void TestObjectSpec::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestObjectSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:TestObjectSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tags_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
  _impl_.priority_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestObjectSpec::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TestObjectSpec.name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TestObjectSpec.description"));
        } else
          goto handle_unusual;
        continue;
      // int32 priority = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.priority_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string tags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "TestObjectSpec.tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .TestObjectSpec.Configuration config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestObjectSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestObjectSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestObjectSpec.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestObjectSpec.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // int32 priority = 3;
  if (this->_internal_priority() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_priority(), target);
  }

  // repeated string tags = 4;
  for (int i = 0, n = this->_internal_tags_size(); i < n; i++) {
    const auto& s = this->_internal_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestObjectSpec.tags");
    target = stream->WriteString(4, s, target);
  }

  // .TestObjectSpec.Configuration config = 5;
  if (this->_internal_has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestObjectSpec)
  return target;
}

size_t TestObjectSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestObjectSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string tags = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.tags_.size());
  for (int i = 0, n = _impl_.tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.tags_.Get(i));
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 2;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .TestObjectSpec.Configuration config = 5;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.config_);
  }

  // int32 priority = 3;
  if (this->_internal_priority() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_priority());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestObjectSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestObjectSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestObjectSpec::GetClassData() const { return &_class_data_; }


void TestObjectSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestObjectSpec*>(&to_msg);
  auto& from = static_cast<const TestObjectSpec&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestObjectSpec)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tags_.MergeFrom(from._impl_.tags_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_has_config()) {
    _this->_internal_mutable_config()->::TestObjectSpec_Configuration::MergeFrom(
        from._internal_config());
  }
  if (from._internal_priority() != 0) {
    _this->_internal_set_priority(from._internal_priority());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestObjectSpec::CopyFrom(const TestObjectSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestObjectSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestObjectSpec::IsInitialized() const {
  return true;
}

void TestObjectSpec::InternalSwap(TestObjectSpec* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tags_.InternalSwap(&other->_impl_.tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestObjectSpec, _impl_.priority_)
      + sizeof(TestObjectSpec::_impl_.priority_)
      - PROTOBUF_FIELD_OFFSET(TestObjectSpec, _impl_.config_)>(
          reinterpret_cast<char*>(&_impl_.config_),
          reinterpret_cast<char*>(&other->_impl_.config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestObjectSpec::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fobject_2eproto_getter, &descriptor_table_test_5fobject_2eproto_once,
      file_level_metadata_test_5fobject_2eproto[1]);
}

// ===================================================================

class TestObjectStatus::_Internal {
 public:
};

TestObjectStatus::TestObjectStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TestObjectStatus)
}
TestObjectStatus::TestObjectStatus(const TestObjectStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestObjectStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.progress_percentage_){}
    , decltype(_impl_.last_updated_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.state_, &from._impl_.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_updated_) -
    reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.last_updated_));
  // @@protoc_insertion_point(copy_constructor:TestObjectStatus)
}

inline void TestObjectStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.progress_percentage_){0}
    , decltype(_impl_.last_updated_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestObjectStatus::~TestObjectStatus() {
  // @@protoc_insertion_point(destructor:TestObjectStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestObjectStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void TestObjectStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestObjectStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:TestObjectStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  ::memset(&_impl_.state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_updated_) -
      reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.last_updated_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestObjectStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TestObjectStatus.State state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::TestObjectStatus_State>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "TestObjectStatus.message"));
        } else
          goto handle_unusual;
        continue;
      // int64 last_updated = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.last_updated_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 progress_percentage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.progress_percentage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestObjectStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestObjectStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TestObjectStatus.State state = 1;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_state(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "TestObjectStatus.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  // int64 last_updated = 3;
  if (this->_internal_last_updated() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_last_updated(), target);
  }

  // int32 progress_percentage = 4;
  if (this->_internal_progress_percentage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_progress_percentage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestObjectStatus)
  return target;
}

size_t TestObjectStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestObjectStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .TestObjectStatus.State state = 1;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // int32 progress_percentage = 4;
  if (this->_internal_progress_percentage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_progress_percentage());
  }

  // int64 last_updated = 3;
  if (this->_internal_last_updated() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_updated());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestObjectStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestObjectStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestObjectStatus::GetClassData() const { return &_class_data_; }


void TestObjectStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestObjectStatus*>(&to_msg);
  auto& from = static_cast<const TestObjectStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestObjectStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_progress_percentage() != 0) {
    _this->_internal_set_progress_percentage(from._internal_progress_percentage());
  }
  if (from._internal_last_updated() != 0) {
    _this->_internal_set_last_updated(from._internal_last_updated());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestObjectStatus::CopyFrom(const TestObjectStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestObjectStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestObjectStatus::IsInitialized() const {
  return true;
}

void TestObjectStatus::InternalSwap(TestObjectStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestObjectStatus, _impl_.last_updated_)
      + sizeof(TestObjectStatus::_impl_.last_updated_)
      - PROTOBUF_FIELD_OFFSET(TestObjectStatus, _impl_.state_)>(
          reinterpret_cast<char*>(&_impl_.state_),
          reinterpret_cast<char*>(&other->_impl_.state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestObjectStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fobject_2eproto_getter, &descriptor_table_test_5fobject_2eproto_once,
      file_level_metadata_test_5fobject_2eproto[2]);
}

// ===================================================================

class TestObject::_Internal {
 public:
  static const ::TestObjectSpec& spec(const TestObject* msg);
  static const ::TestObjectStatus& status(const TestObject* msg);
};

const ::TestObjectSpec&
TestObject::_Internal::spec(const TestObject* msg) {
  return *msg->_impl_.spec_;
}
const ::TestObjectStatus&
TestObject::_Internal::status(const TestObject* msg) {
  return *msg->_impl_.status_;
}
TestObject::TestObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TestObject)
}
TestObject::TestObject(const TestObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestObject* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_spec()) {
    _this->_impl_.spec_ = new ::TestObjectSpec(*from._impl_.spec_);
  }
  if (from._internal_has_status()) {
    _this->_impl_.status_ = new ::TestObjectStatus(*from._impl_.status_);
  }
  // @@protoc_insertion_point(copy_constructor:TestObject)
}

inline void TestObject::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.spec_){nullptr}
    , decltype(_impl_.status_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TestObject::~TestObject() {
  // @@protoc_insertion_point(destructor:TestObject)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.spec_;
  if (this != internal_default_instance()) delete _impl_.status_;
}

void TestObject::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestObject::Clear() {
// @@protoc_insertion_point(message_clear_start:TestObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.spec_ != nullptr) {
    delete _impl_.spec_;
  }
  _impl_.spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestObject::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TestObjectSpec spec = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TestObjectStatus status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TestObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .TestObjectSpec spec = 2;
  if (this->_internal_has_spec()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::spec(this),
        _Internal::spec(this).GetCachedSize(), target, stream);
  }

  // .TestObjectStatus status = 3;
  if (this->_internal_has_status()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::status(this),
        _Internal::status(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TestObject)
  return target;
}

size_t TestObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TestObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TestObjectSpec spec = 2;
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spec_);
  }

  // .TestObjectStatus status = 3;
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestObject::GetClassData() const { return &_class_data_; }


void TestObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestObject*>(&to_msg);
  auto& from = static_cast<const TestObject&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TestObject)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_spec()) {
    _this->_internal_mutable_spec()->::TestObjectSpec::MergeFrom(
        from._internal_spec());
  }
  if (from._internal_has_status()) {
    _this->_internal_mutable_status()->::TestObjectStatus::MergeFrom(
        from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestObject::CopyFrom(const TestObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TestObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestObject::IsInitialized() const {
  return true;
}

void TestObject::InternalSwap(TestObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestObject, _impl_.status_)
      + sizeof(TestObject::_impl_.status_)
      - PROTOBUF_FIELD_OFFSET(TestObject, _impl_.spec_)>(
          reinterpret_cast<char*>(&_impl_.spec_),
          reinterpret_cast<char*>(&other->_impl_.spec_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestObject::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_test_5fobject_2eproto_getter, &descriptor_table_test_5fobject_2eproto_once,
      file_level_metadata_test_5fobject_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TestObjectSpec_Configuration*
Arena::CreateMaybeMessage< ::TestObjectSpec_Configuration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestObjectSpec_Configuration >(arena);
}
template<> PROTOBUF_NOINLINE ::TestObjectSpec*
Arena::CreateMaybeMessage< ::TestObjectSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestObjectSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::TestObjectStatus*
Arena::CreateMaybeMessage< ::TestObjectStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestObjectStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::TestObject*
Arena::CreateMaybeMessage< ::TestObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TestObject >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
