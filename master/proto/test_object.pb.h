// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_object.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_5fobject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_5fobject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "object_base.pb.h"
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_5fobject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_5fobject_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_5fobject_2eproto;
class TestObject;
struct TestObjectDefaultTypeInternal;
extern TestObjectDefaultTypeInternal _TestObject_default_instance_;
class TestObjectSpec;
struct TestObjectSpecDefaultTypeInternal;
extern TestObjectSpecDefaultTypeInternal _TestObjectSpec_default_instance_;
class TestObjectSpec_Configuration;
struct TestObjectSpec_ConfigurationDefaultTypeInternal;
extern TestObjectSpec_ConfigurationDefaultTypeInternal _TestObjectSpec_Configuration_default_instance_;
class TestObjectStatus;
struct TestObjectStatusDefaultTypeInternal;
extern TestObjectStatusDefaultTypeInternal _TestObjectStatus_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::TestObject* Arena::CreateMaybeMessage<::TestObject>(Arena*);
template<> ::TestObjectSpec* Arena::CreateMaybeMessage<::TestObjectSpec>(Arena*);
template<> ::TestObjectSpec_Configuration* Arena::CreateMaybeMessage<::TestObjectSpec_Configuration>(Arena*);
template<> ::TestObjectStatus* Arena::CreateMaybeMessage<::TestObjectStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum TestObjectStatus_State : int {
  TestObjectStatus_State_UNKNOWN = 0,
  TestObjectStatus_State_PENDING = 1,
  TestObjectStatus_State_ACTIVE = 2,
  TestObjectStatus_State_COMPLETED = 3,
  TestObjectStatus_State_FAILED = 4,
  TestObjectStatus_State_TestObjectStatus_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  TestObjectStatus_State_TestObjectStatus_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool TestObjectStatus_State_IsValid(int value);
constexpr TestObjectStatus_State TestObjectStatus_State_State_MIN = TestObjectStatus_State_UNKNOWN;
constexpr TestObjectStatus_State TestObjectStatus_State_State_MAX = TestObjectStatus_State_FAILED;
constexpr int TestObjectStatus_State_State_ARRAYSIZE = TestObjectStatus_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestObjectStatus_State_descriptor();
template<typename T>
inline const std::string& TestObjectStatus_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TestObjectStatus_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TestObjectStatus_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TestObjectStatus_State_descriptor(), enum_t_value);
}
inline bool TestObjectStatus_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TestObjectStatus_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TestObjectStatus_State>(
    TestObjectStatus_State_descriptor(), name, value);
}
// ===================================================================

class TestObjectSpec_Configuration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestObjectSpec.Configuration) */ {
 public:
  inline TestObjectSpec_Configuration() : TestObjectSpec_Configuration(nullptr) {}
  ~TestObjectSpec_Configuration() override;
  explicit PROTOBUF_CONSTEXPR TestObjectSpec_Configuration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestObjectSpec_Configuration(const TestObjectSpec_Configuration& from);
  TestObjectSpec_Configuration(TestObjectSpec_Configuration&& from) noexcept
    : TestObjectSpec_Configuration() {
    *this = ::std::move(from);
  }

  inline TestObjectSpec_Configuration& operator=(const TestObjectSpec_Configuration& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestObjectSpec_Configuration& operator=(TestObjectSpec_Configuration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestObjectSpec_Configuration& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestObjectSpec_Configuration* internal_default_instance() {
    return reinterpret_cast<const TestObjectSpec_Configuration*>(
               &_TestObjectSpec_Configuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TestObjectSpec_Configuration& a, TestObjectSpec_Configuration& b) {
    a.Swap(&b);
  }
  inline void Swap(TestObjectSpec_Configuration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestObjectSpec_Configuration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestObjectSpec_Configuration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestObjectSpec_Configuration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestObjectSpec_Configuration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestObjectSpec_Configuration& from) {
    TestObjectSpec_Configuration::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestObjectSpec_Configuration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestObjectSpec.Configuration";
  }
  protected:
  explicit TestObjectSpec_Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeoutSecondsFieldNumber = 1,
    kEnableNotificationsFieldNumber = 2,
  };
  // int32 timeout_seconds = 1;
  void clear_timeout_seconds();
  int32_t timeout_seconds() const;
  void set_timeout_seconds(int32_t value);
  private:
  int32_t _internal_timeout_seconds() const;
  void _internal_set_timeout_seconds(int32_t value);
  public:

  // bool enable_notifications = 2;
  void clear_enable_notifications();
  bool enable_notifications() const;
  void set_enable_notifications(bool value);
  private:
  bool _internal_enable_notifications() const;
  void _internal_set_enable_notifications(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TestObjectSpec.Configuration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t timeout_seconds_;
    bool enable_notifications_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5fobject_2eproto;
};
// -------------------------------------------------------------------

class TestObjectSpec final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestObjectSpec) */ {
 public:
  inline TestObjectSpec() : TestObjectSpec(nullptr) {}
  ~TestObjectSpec() override;
  explicit PROTOBUF_CONSTEXPR TestObjectSpec(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestObjectSpec(const TestObjectSpec& from);
  TestObjectSpec(TestObjectSpec&& from) noexcept
    : TestObjectSpec() {
    *this = ::std::move(from);
  }

  inline TestObjectSpec& operator=(const TestObjectSpec& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestObjectSpec& operator=(TestObjectSpec&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestObjectSpec& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestObjectSpec* internal_default_instance() {
    return reinterpret_cast<const TestObjectSpec*>(
               &_TestObjectSpec_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TestObjectSpec& a, TestObjectSpec& b) {
    a.Swap(&b);
  }
  inline void Swap(TestObjectSpec* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestObjectSpec* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestObjectSpec* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestObjectSpec>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestObjectSpec& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestObjectSpec& from) {
    TestObjectSpec::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestObjectSpec* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestObjectSpec";
  }
  protected:
  explicit TestObjectSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestObjectSpec_Configuration Configuration;

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 4,
    kNameFieldNumber = 1,
    kDescriptionFieldNumber = 2,
    kConfigFieldNumber = 5,
    kPriorityFieldNumber = 3,
  };
  // repeated string tags = 4;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 2;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .TestObjectSpec.Configuration config = 5;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::TestObjectSpec_Configuration& config() const;
  PROTOBUF_NODISCARD ::TestObjectSpec_Configuration* release_config();
  ::TestObjectSpec_Configuration* mutable_config();
  void set_allocated_config(::TestObjectSpec_Configuration* config);
  private:
  const ::TestObjectSpec_Configuration& _internal_config() const;
  ::TestObjectSpec_Configuration* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::TestObjectSpec_Configuration* config);
  ::TestObjectSpec_Configuration* unsafe_arena_release_config();

  // int32 priority = 3;
  void clear_priority();
  int32_t priority() const;
  void set_priority(int32_t value);
  private:
  int32_t _internal_priority() const;
  void _internal_set_priority(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:TestObjectSpec)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
    ::TestObjectSpec_Configuration* config_;
    int32_t priority_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5fobject_2eproto;
};
// -------------------------------------------------------------------

class TestObjectStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestObjectStatus) */ {
 public:
  inline TestObjectStatus() : TestObjectStatus(nullptr) {}
  ~TestObjectStatus() override;
  explicit PROTOBUF_CONSTEXPR TestObjectStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestObjectStatus(const TestObjectStatus& from);
  TestObjectStatus(TestObjectStatus&& from) noexcept
    : TestObjectStatus() {
    *this = ::std::move(from);
  }

  inline TestObjectStatus& operator=(const TestObjectStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestObjectStatus& operator=(TestObjectStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestObjectStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestObjectStatus* internal_default_instance() {
    return reinterpret_cast<const TestObjectStatus*>(
               &_TestObjectStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestObjectStatus& a, TestObjectStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(TestObjectStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestObjectStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestObjectStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestObjectStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestObjectStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestObjectStatus& from) {
    TestObjectStatus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestObjectStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestObjectStatus";
  }
  protected:
  explicit TestObjectStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TestObjectStatus_State State;
  static constexpr State UNKNOWN =
    TestObjectStatus_State_UNKNOWN;
  static constexpr State PENDING =
    TestObjectStatus_State_PENDING;
  static constexpr State ACTIVE =
    TestObjectStatus_State_ACTIVE;
  static constexpr State COMPLETED =
    TestObjectStatus_State_COMPLETED;
  static constexpr State FAILED =
    TestObjectStatus_State_FAILED;
  static inline bool State_IsValid(int value) {
    return TestObjectStatus_State_IsValid(value);
  }
  static constexpr State State_MIN =
    TestObjectStatus_State_State_MIN;
  static constexpr State State_MAX =
    TestObjectStatus_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    TestObjectStatus_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return TestObjectStatus_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return TestObjectStatus_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return TestObjectStatus_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kStateFieldNumber = 1,
    kProgressPercentageFieldNumber = 4,
    kLastUpdatedFieldNumber = 3,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // .TestObjectStatus.State state = 1;
  void clear_state();
  ::TestObjectStatus_State state() const;
  void set_state(::TestObjectStatus_State value);
  private:
  ::TestObjectStatus_State _internal_state() const;
  void _internal_set_state(::TestObjectStatus_State value);
  public:

  // int32 progress_percentage = 4;
  void clear_progress_percentage();
  int32_t progress_percentage() const;
  void set_progress_percentage(int32_t value);
  private:
  int32_t _internal_progress_percentage() const;
  void _internal_set_progress_percentage(int32_t value);
  public:

  // int64 last_updated = 3;
  void clear_last_updated();
  int64_t last_updated() const;
  void set_last_updated(int64_t value);
  private:
  int64_t _internal_last_updated() const;
  void _internal_set_last_updated(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:TestObjectStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    int state_;
    int32_t progress_percentage_;
    int64_t last_updated_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5fobject_2eproto;
};
// -------------------------------------------------------------------

class TestObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TestObject) */ {
 public:
  inline TestObject() : TestObject(nullptr) {}
  ~TestObject() override;
  explicit PROTOBUF_CONSTEXPR TestObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TestObject(const TestObject& from);
  TestObject(TestObject&& from) noexcept
    : TestObject() {
    *this = ::std::move(from);
  }

  inline TestObject& operator=(const TestObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestObject& operator=(TestObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TestObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const TestObject* internal_default_instance() {
    return reinterpret_cast<const TestObject*>(
               &_TestObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TestObject& a, TestObject& b) {
    a.Swap(&b);
  }
  inline void Swap(TestObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TestObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TestObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TestObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TestObject& from) {
    TestObject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TestObject";
  }
  protected:
  explicit TestObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSpecFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // .TestObjectSpec spec = 2;
  bool has_spec() const;
  private:
  bool _internal_has_spec() const;
  public:
  void clear_spec();
  const ::TestObjectSpec& spec() const;
  PROTOBUF_NODISCARD ::TestObjectSpec* release_spec();
  ::TestObjectSpec* mutable_spec();
  void set_allocated_spec(::TestObjectSpec* spec);
  private:
  const ::TestObjectSpec& _internal_spec() const;
  ::TestObjectSpec* _internal_mutable_spec();
  public:
  void unsafe_arena_set_allocated_spec(
      ::TestObjectSpec* spec);
  ::TestObjectSpec* unsafe_arena_release_spec();

  // .TestObjectStatus status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::TestObjectStatus& status() const;
  PROTOBUF_NODISCARD ::TestObjectStatus* release_status();
  ::TestObjectStatus* mutable_status();
  void set_allocated_status(::TestObjectStatus* status);
  private:
  const ::TestObjectStatus& _internal_status() const;
  ::TestObjectStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::TestObjectStatus* status);
  ::TestObjectStatus* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:TestObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::TestObjectSpec* spec_;
    ::TestObjectStatus* status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_test_5fobject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TestObjectSpec_Configuration

// int32 timeout_seconds = 1;
inline void TestObjectSpec_Configuration::clear_timeout_seconds() {
  _impl_.timeout_seconds_ = 0;
}
inline int32_t TestObjectSpec_Configuration::_internal_timeout_seconds() const {
  return _impl_.timeout_seconds_;
}
inline int32_t TestObjectSpec_Configuration::timeout_seconds() const {
  // @@protoc_insertion_point(field_get:TestObjectSpec.Configuration.timeout_seconds)
  return _internal_timeout_seconds();
}
inline void TestObjectSpec_Configuration::_internal_set_timeout_seconds(int32_t value) {
  
  _impl_.timeout_seconds_ = value;
}
inline void TestObjectSpec_Configuration::set_timeout_seconds(int32_t value) {
  _internal_set_timeout_seconds(value);
  // @@protoc_insertion_point(field_set:TestObjectSpec.Configuration.timeout_seconds)
}

// bool enable_notifications = 2;
inline void TestObjectSpec_Configuration::clear_enable_notifications() {
  _impl_.enable_notifications_ = false;
}
inline bool TestObjectSpec_Configuration::_internal_enable_notifications() const {
  return _impl_.enable_notifications_;
}
inline bool TestObjectSpec_Configuration::enable_notifications() const {
  // @@protoc_insertion_point(field_get:TestObjectSpec.Configuration.enable_notifications)
  return _internal_enable_notifications();
}
inline void TestObjectSpec_Configuration::_internal_set_enable_notifications(bool value) {
  
  _impl_.enable_notifications_ = value;
}
inline void TestObjectSpec_Configuration::set_enable_notifications(bool value) {
  _internal_set_enable_notifications(value);
  // @@protoc_insertion_point(field_set:TestObjectSpec.Configuration.enable_notifications)
}

// -------------------------------------------------------------------

// TestObjectSpec

// string name = 1;
inline void TestObjectSpec::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& TestObjectSpec::name() const {
  // @@protoc_insertion_point(field_get:TestObjectSpec.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestObjectSpec::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TestObjectSpec.name)
}
inline std::string* TestObjectSpec::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:TestObjectSpec.name)
  return _s;
}
inline const std::string& TestObjectSpec::_internal_name() const {
  return _impl_.name_.Get();
}
inline void TestObjectSpec::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* TestObjectSpec::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* TestObjectSpec::release_name() {
  // @@protoc_insertion_point(field_release:TestObjectSpec.name)
  return _impl_.name_.Release();
}
inline void TestObjectSpec::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TestObjectSpec.name)
}

// string description = 2;
inline void TestObjectSpec::clear_description() {
  _impl_.description_.ClearToEmpty();
}
inline const std::string& TestObjectSpec::description() const {
  // @@protoc_insertion_point(field_get:TestObjectSpec.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestObjectSpec::set_description(ArgT0&& arg0, ArgT... args) {
 
 _impl_.description_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TestObjectSpec.description)
}
inline std::string* TestObjectSpec::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:TestObjectSpec.description)
  return _s;
}
inline const std::string& TestObjectSpec::_internal_description() const {
  return _impl_.description_.Get();
}
inline void TestObjectSpec::_internal_set_description(const std::string& value) {
  
  _impl_.description_.Set(value, GetArenaForAllocation());
}
inline std::string* TestObjectSpec::_internal_mutable_description() {
  
  return _impl_.description_.Mutable(GetArenaForAllocation());
}
inline std::string* TestObjectSpec::release_description() {
  // @@protoc_insertion_point(field_release:TestObjectSpec.description)
  return _impl_.description_.Release();
}
inline void TestObjectSpec::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  _impl_.description_.SetAllocated(description, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.description_.IsDefault()) {
    _impl_.description_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TestObjectSpec.description)
}

// int32 priority = 3;
inline void TestObjectSpec::clear_priority() {
  _impl_.priority_ = 0;
}
inline int32_t TestObjectSpec::_internal_priority() const {
  return _impl_.priority_;
}
inline int32_t TestObjectSpec::priority() const {
  // @@protoc_insertion_point(field_get:TestObjectSpec.priority)
  return _internal_priority();
}
inline void TestObjectSpec::_internal_set_priority(int32_t value) {
  
  _impl_.priority_ = value;
}
inline void TestObjectSpec::set_priority(int32_t value) {
  _internal_set_priority(value);
  // @@protoc_insertion_point(field_set:TestObjectSpec.priority)
}

// repeated string tags = 4;
inline int TestObjectSpec::_internal_tags_size() const {
  return _impl_.tags_.size();
}
inline int TestObjectSpec::tags_size() const {
  return _internal_tags_size();
}
inline void TestObjectSpec::clear_tags() {
  _impl_.tags_.Clear();
}
inline std::string* TestObjectSpec::add_tags() {
  std::string* _s = _internal_add_tags();
  // @@protoc_insertion_point(field_add_mutable:TestObjectSpec.tags)
  return _s;
}
inline const std::string& TestObjectSpec::_internal_tags(int index) const {
  return _impl_.tags_.Get(index);
}
inline const std::string& TestObjectSpec::tags(int index) const {
  // @@protoc_insertion_point(field_get:TestObjectSpec.tags)
  return _internal_tags(index);
}
inline std::string* TestObjectSpec::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:TestObjectSpec.tags)
  return _impl_.tags_.Mutable(index);
}
inline void TestObjectSpec::set_tags(int index, const std::string& value) {
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:TestObjectSpec.tags)
}
inline void TestObjectSpec::set_tags(int index, std::string&& value) {
  _impl_.tags_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:TestObjectSpec.tags)
}
inline void TestObjectSpec::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:TestObjectSpec.tags)
}
inline void TestObjectSpec::set_tags(int index, const char* value, size_t size) {
  _impl_.tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:TestObjectSpec.tags)
}
inline std::string* TestObjectSpec::_internal_add_tags() {
  return _impl_.tags_.Add();
}
inline void TestObjectSpec::add_tags(const std::string& value) {
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:TestObjectSpec.tags)
}
inline void TestObjectSpec::add_tags(std::string&& value) {
  _impl_.tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:TestObjectSpec.tags)
}
inline void TestObjectSpec::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:TestObjectSpec.tags)
}
inline void TestObjectSpec::add_tags(const char* value, size_t size) {
  _impl_.tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:TestObjectSpec.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TestObjectSpec::tags() const {
  // @@protoc_insertion_point(field_list:TestObjectSpec.tags)
  return _impl_.tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TestObjectSpec::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:TestObjectSpec.tags)
  return &_impl_.tags_;
}

// .TestObjectSpec.Configuration config = 5;
inline bool TestObjectSpec::_internal_has_config() const {
  return this != internal_default_instance() && _impl_.config_ != nullptr;
}
inline bool TestObjectSpec::has_config() const {
  return _internal_has_config();
}
inline void TestObjectSpec::clear_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
}
inline const ::TestObjectSpec_Configuration& TestObjectSpec::_internal_config() const {
  const ::TestObjectSpec_Configuration* p = _impl_.config_;
  return p != nullptr ? *p : reinterpret_cast<const ::TestObjectSpec_Configuration&>(
      ::_TestObjectSpec_Configuration_default_instance_);
}
inline const ::TestObjectSpec_Configuration& TestObjectSpec::config() const {
  // @@protoc_insertion_point(field_get:TestObjectSpec.config)
  return _internal_config();
}
inline void TestObjectSpec::unsafe_arena_set_allocated_config(
    ::TestObjectSpec_Configuration* config) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.config_);
  }
  _impl_.config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TestObjectSpec.config)
}
inline ::TestObjectSpec_Configuration* TestObjectSpec::release_config() {
  
  ::TestObjectSpec_Configuration* temp = _impl_.config_;
  _impl_.config_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TestObjectSpec_Configuration* TestObjectSpec::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:TestObjectSpec.config)
  
  ::TestObjectSpec_Configuration* temp = _impl_.config_;
  _impl_.config_ = nullptr;
  return temp;
}
inline ::TestObjectSpec_Configuration* TestObjectSpec::_internal_mutable_config() {
  
  if (_impl_.config_ == nullptr) {
    auto* p = CreateMaybeMessage<::TestObjectSpec_Configuration>(GetArenaForAllocation());
    _impl_.config_ = p;
  }
  return _impl_.config_;
}
inline ::TestObjectSpec_Configuration* TestObjectSpec::mutable_config() {
  ::TestObjectSpec_Configuration* _msg = _internal_mutable_config();
  // @@protoc_insertion_point(field_mutable:TestObjectSpec.config)
  return _msg;
}
inline void TestObjectSpec::set_allocated_config(::TestObjectSpec_Configuration* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.config_ = config;
  // @@protoc_insertion_point(field_set_allocated:TestObjectSpec.config)
}

// -------------------------------------------------------------------

// TestObjectStatus

// .TestObjectStatus.State state = 1;
inline void TestObjectStatus::clear_state() {
  _impl_.state_ = 0;
}
inline ::TestObjectStatus_State TestObjectStatus::_internal_state() const {
  return static_cast< ::TestObjectStatus_State >(_impl_.state_);
}
inline ::TestObjectStatus_State TestObjectStatus::state() const {
  // @@protoc_insertion_point(field_get:TestObjectStatus.state)
  return _internal_state();
}
inline void TestObjectStatus::_internal_set_state(::TestObjectStatus_State value) {
  
  _impl_.state_ = value;
}
inline void TestObjectStatus::set_state(::TestObjectStatus_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:TestObjectStatus.state)
}

// string message = 2;
inline void TestObjectStatus::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& TestObjectStatus::message() const {
  // @@protoc_insertion_point(field_get:TestObjectStatus.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TestObjectStatus::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:TestObjectStatus.message)
}
inline std::string* TestObjectStatus::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:TestObjectStatus.message)
  return _s;
}
inline const std::string& TestObjectStatus::_internal_message() const {
  return _impl_.message_.Get();
}
inline void TestObjectStatus::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* TestObjectStatus::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* TestObjectStatus::release_message() {
  // @@protoc_insertion_point(field_release:TestObjectStatus.message)
  return _impl_.message_.Release();
}
inline void TestObjectStatus::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:TestObjectStatus.message)
}

// int64 last_updated = 3;
inline void TestObjectStatus::clear_last_updated() {
  _impl_.last_updated_ = int64_t{0};
}
inline int64_t TestObjectStatus::_internal_last_updated() const {
  return _impl_.last_updated_;
}
inline int64_t TestObjectStatus::last_updated() const {
  // @@protoc_insertion_point(field_get:TestObjectStatus.last_updated)
  return _internal_last_updated();
}
inline void TestObjectStatus::_internal_set_last_updated(int64_t value) {
  
  _impl_.last_updated_ = value;
}
inline void TestObjectStatus::set_last_updated(int64_t value) {
  _internal_set_last_updated(value);
  // @@protoc_insertion_point(field_set:TestObjectStatus.last_updated)
}

// int32 progress_percentage = 4;
inline void TestObjectStatus::clear_progress_percentage() {
  _impl_.progress_percentage_ = 0;
}
inline int32_t TestObjectStatus::_internal_progress_percentage() const {
  return _impl_.progress_percentage_;
}
inline int32_t TestObjectStatus::progress_percentage() const {
  // @@protoc_insertion_point(field_get:TestObjectStatus.progress_percentage)
  return _internal_progress_percentage();
}
inline void TestObjectStatus::_internal_set_progress_percentage(int32_t value) {
  
  _impl_.progress_percentage_ = value;
}
inline void TestObjectStatus::set_progress_percentage(int32_t value) {
  _internal_set_progress_percentage(value);
  // @@protoc_insertion_point(field_set:TestObjectStatus.progress_percentage)
}

// -------------------------------------------------------------------

// TestObject

// .TestObjectSpec spec = 2;
inline bool TestObject::_internal_has_spec() const {
  return this != internal_default_instance() && _impl_.spec_ != nullptr;
}
inline bool TestObject::has_spec() const {
  return _internal_has_spec();
}
inline void TestObject::clear_spec() {
  if (GetArenaForAllocation() == nullptr && _impl_.spec_ != nullptr) {
    delete _impl_.spec_;
  }
  _impl_.spec_ = nullptr;
}
inline const ::TestObjectSpec& TestObject::_internal_spec() const {
  const ::TestObjectSpec* p = _impl_.spec_;
  return p != nullptr ? *p : reinterpret_cast<const ::TestObjectSpec&>(
      ::_TestObjectSpec_default_instance_);
}
inline const ::TestObjectSpec& TestObject::spec() const {
  // @@protoc_insertion_point(field_get:TestObject.spec)
  return _internal_spec();
}
inline void TestObject::unsafe_arena_set_allocated_spec(
    ::TestObjectSpec* spec) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spec_);
  }
  _impl_.spec_ = spec;
  if (spec) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TestObject.spec)
}
inline ::TestObjectSpec* TestObject::release_spec() {
  
  ::TestObjectSpec* temp = _impl_.spec_;
  _impl_.spec_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TestObjectSpec* TestObject::unsafe_arena_release_spec() {
  // @@protoc_insertion_point(field_release:TestObject.spec)
  
  ::TestObjectSpec* temp = _impl_.spec_;
  _impl_.spec_ = nullptr;
  return temp;
}
inline ::TestObjectSpec* TestObject::_internal_mutable_spec() {
  
  if (_impl_.spec_ == nullptr) {
    auto* p = CreateMaybeMessage<::TestObjectSpec>(GetArenaForAllocation());
    _impl_.spec_ = p;
  }
  return _impl_.spec_;
}
inline ::TestObjectSpec* TestObject::mutable_spec() {
  ::TestObjectSpec* _msg = _internal_mutable_spec();
  // @@protoc_insertion_point(field_mutable:TestObject.spec)
  return _msg;
}
inline void TestObject::set_allocated_spec(::TestObjectSpec* spec) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.spec_;
  }
  if (spec) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(spec);
    if (message_arena != submessage_arena) {
      spec = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spec, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.spec_ = spec;
  // @@protoc_insertion_point(field_set_allocated:TestObject.spec)
}

// .TestObjectStatus status = 3;
inline bool TestObject::_internal_has_status() const {
  return this != internal_default_instance() && _impl_.status_ != nullptr;
}
inline bool TestObject::has_status() const {
  return _internal_has_status();
}
inline void TestObject::clear_status() {
  if (GetArenaForAllocation() == nullptr && _impl_.status_ != nullptr) {
    delete _impl_.status_;
  }
  _impl_.status_ = nullptr;
}
inline const ::TestObjectStatus& TestObject::_internal_status() const {
  const ::TestObjectStatus* p = _impl_.status_;
  return p != nullptr ? *p : reinterpret_cast<const ::TestObjectStatus&>(
      ::_TestObjectStatus_default_instance_);
}
inline const ::TestObjectStatus& TestObject::status() const {
  // @@protoc_insertion_point(field_get:TestObject.status)
  return _internal_status();
}
inline void TestObject::unsafe_arena_set_allocated_status(
    ::TestObjectStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.status_);
  }
  _impl_.status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TestObject.status)
}
inline ::TestObjectStatus* TestObject::release_status() {
  
  ::TestObjectStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TestObjectStatus* TestObject::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:TestObject.status)
  
  ::TestObjectStatus* temp = _impl_.status_;
  _impl_.status_ = nullptr;
  return temp;
}
inline ::TestObjectStatus* TestObject::_internal_mutable_status() {
  
  if (_impl_.status_ == nullptr) {
    auto* p = CreateMaybeMessage<::TestObjectStatus>(GetArenaForAllocation());
    _impl_.status_ = p;
  }
  return _impl_.status_;
}
inline ::TestObjectStatus* TestObject::mutable_status() {
  ::TestObjectStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:TestObject.status)
  return _msg;
}
inline void TestObject::set_allocated_status(::TestObjectStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.status_ = status;
  // @@protoc_insertion_point(field_set_allocated:TestObject.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TestObjectStatus_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TestObjectStatus_State>() {
  return ::TestObjectStatus_State_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_5fobject_2eproto
