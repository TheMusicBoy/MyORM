// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: object_base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_object_5fbase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_object_5fbase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021005 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_object_5fbase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_object_5fbase_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_object_5fbase_2eproto;
namespace orm {
class FieldOptions;
struct FieldOptionsDefaultTypeInternal;
extern FieldOptionsDefaultTypeInternal _FieldOptions_default_instance_;
class ObjectMeta;
struct ObjectMetaDefaultTypeInternal;
extern ObjectMetaDefaultTypeInternal _ObjectMeta_default_instance_;
class ObjectMeta_ACLEntry;
struct ObjectMeta_ACLEntryDefaultTypeInternal;
extern ObjectMeta_ACLEntryDefaultTypeInternal _ObjectMeta_ACLEntry_default_instance_;
class ObjectTypeOptions;
struct ObjectTypeOptionsDefaultTypeInternal;
extern ObjectTypeOptionsDefaultTypeInternal _ObjectTypeOptions_default_instance_;
}  // namespace orm
PROTOBUF_NAMESPACE_OPEN
template<> ::orm::FieldOptions* Arena::CreateMaybeMessage<::orm::FieldOptions>(Arena*);
template<> ::orm::ObjectMeta* Arena::CreateMaybeMessage<::orm::ObjectMeta>(Arena*);
template<> ::orm::ObjectMeta_ACLEntry* Arena::CreateMaybeMessage<::orm::ObjectMeta_ACLEntry>(Arena*);
template<> ::orm::ObjectTypeOptions* Arena::CreateMaybeMessage<::orm::ObjectTypeOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace orm {

enum ObjectMeta_ACLEntry_Permission : int {
  ObjectMeta_ACLEntry_Permission_NONE = 0,
  ObjectMeta_ACLEntry_Permission_READ = 1,
  ObjectMeta_ACLEntry_Permission_WRITE = 2,
  ObjectMeta_ACLEntry_Permission_ADMIN = 3,
  ObjectMeta_ACLEntry_Permission_ObjectMeta_ACLEntry_Permission_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ObjectMeta_ACLEntry_Permission_ObjectMeta_ACLEntry_Permission_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ObjectMeta_ACLEntry_Permission_IsValid(int value);
constexpr ObjectMeta_ACLEntry_Permission ObjectMeta_ACLEntry_Permission_Permission_MIN = ObjectMeta_ACLEntry_Permission_NONE;
constexpr ObjectMeta_ACLEntry_Permission ObjectMeta_ACLEntry_Permission_Permission_MAX = ObjectMeta_ACLEntry_Permission_ADMIN;
constexpr int ObjectMeta_ACLEntry_Permission_Permission_ARRAYSIZE = ObjectMeta_ACLEntry_Permission_Permission_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectMeta_ACLEntry_Permission_descriptor();
template<typename T>
inline const std::string& ObjectMeta_ACLEntry_Permission_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObjectMeta_ACLEntry_Permission>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObjectMeta_ACLEntry_Permission_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObjectMeta_ACLEntry_Permission_descriptor(), enum_t_value);
}
inline bool ObjectMeta_ACLEntry_Permission_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObjectMeta_ACLEntry_Permission* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObjectMeta_ACLEntry_Permission>(
    ObjectMeta_ACLEntry_Permission_descriptor(), name, value);
}
enum GenerationPolicy : int {
  GP_AUTO = 0,
  GP_MANUAL = 1,
  GenerationPolicy_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  GenerationPolicy_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool GenerationPolicy_IsValid(int value);
constexpr GenerationPolicy GenerationPolicy_MIN = GP_AUTO;
constexpr GenerationPolicy GenerationPolicy_MAX = GP_MANUAL;
constexpr int GenerationPolicy_ARRAYSIZE = GenerationPolicy_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GenerationPolicy_descriptor();
template<typename T>
inline const std::string& GenerationPolicy_Name(T enum_t_value) {
  static_assert(::std::is_same<T, GenerationPolicy>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function GenerationPolicy_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    GenerationPolicy_descriptor(), enum_t_value);
}
inline bool GenerationPolicy_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, GenerationPolicy* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<GenerationPolicy>(
    GenerationPolicy_descriptor(), name, value);
}
// ===================================================================

class ObjectTypeOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orm.ObjectTypeOptions) */ {
 public:
  inline ObjectTypeOptions() : ObjectTypeOptions(nullptr) {}
  ~ObjectTypeOptions() override;
  explicit PROTOBUF_CONSTEXPR ObjectTypeOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectTypeOptions(const ObjectTypeOptions& from);
  ObjectTypeOptions(ObjectTypeOptions&& from) noexcept
    : ObjectTypeOptions() {
    *this = ::std::move(from);
  }

  inline ObjectTypeOptions& operator=(const ObjectTypeOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectTypeOptions& operator=(ObjectTypeOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectTypeOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectTypeOptions* internal_default_instance() {
    return reinterpret_cast<const ObjectTypeOptions*>(
               &_ObjectTypeOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObjectTypeOptions& a, ObjectTypeOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectTypeOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectTypeOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectTypeOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectTypeOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectTypeOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectTypeOptions& from) {
    ObjectTypeOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectTypeOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orm.ObjectTypeOptions";
  }
  protected:
  explicit ObjectTypeOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCamelCaseNameFieldNumber = 1,
    kSnakeCaseNameFieldNumber = 2,
    kCustomTypeHandlerFieldNumber = 4,
    kTypeValueFieldNumber = 5,
  };
  // string camel_case_name = 1;
  void clear_camel_case_name();
  const std::string& camel_case_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_camel_case_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_camel_case_name();
  PROTOBUF_NODISCARD std::string* release_camel_case_name();
  void set_allocated_camel_case_name(std::string* camel_case_name);
  private:
  const std::string& _internal_camel_case_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_camel_case_name(const std::string& value);
  std::string* _internal_mutable_camel_case_name();
  public:

  // string snake_case_name = 2;
  void clear_snake_case_name();
  const std::string& snake_case_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_snake_case_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_snake_case_name();
  PROTOBUF_NODISCARD std::string* release_snake_case_name();
  void set_allocated_snake_case_name(std::string* snake_case_name);
  private:
  const std::string& _internal_snake_case_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_snake_case_name(const std::string& value);
  std::string* _internal_mutable_snake_case_name();
  public:

  // bool custom_type_handler = 4;
  void clear_custom_type_handler();
  bool custom_type_handler() const;
  void set_custom_type_handler(bool value);
  private:
  bool _internal_custom_type_handler() const;
  void _internal_set_custom_type_handler(bool value);
  public:

  // int32 type_value = 5;
  void clear_type_value();
  int32_t type_value() const;
  void set_type_value(int32_t value);
  private:
  int32_t _internal_type_value() const;
  void _internal_set_type_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:orm.ObjectTypeOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr camel_case_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr snake_case_name_;
    bool custom_type_handler_;
    int32_t type_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_object_5fbase_2eproto;
};
// -------------------------------------------------------------------

class FieldOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orm.FieldOptions) */ {
 public:
  inline FieldOptions() : FieldOptions(nullptr) {}
  ~FieldOptions() override;
  explicit PROTOBUF_CONSTEXPR FieldOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldOptions(const FieldOptions& from);
  FieldOptions(FieldOptions&& from) noexcept
    : FieldOptions() {
    *this = ::std::move(from);
  }

  inline FieldOptions& operator=(const FieldOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldOptions& operator=(FieldOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldOptions* internal_default_instance() {
    return reinterpret_cast<const FieldOptions*>(
               &_FieldOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FieldOptions& a, FieldOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FieldOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FieldOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FieldOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const FieldOptions& from) {
    FieldOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orm.FieldOptions";
  }
  protected:
  explicit FieldOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStorageTypeFieldNumber = 2,
    kGenerationPolicyFieldNumber = 1,
  };
  // string storage_type = 2;
  void clear_storage_type();
  const std::string& storage_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_storage_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_storage_type();
  PROTOBUF_NODISCARD std::string* release_storage_type();
  void set_allocated_storage_type(std::string* storage_type);
  private:
  const std::string& _internal_storage_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_storage_type(const std::string& value);
  std::string* _internal_mutable_storage_type();
  public:

  // .orm.GenerationPolicy generation_policy = 1;
  void clear_generation_policy();
  ::orm::GenerationPolicy generation_policy() const;
  void set_generation_policy(::orm::GenerationPolicy value);
  private:
  ::orm::GenerationPolicy _internal_generation_policy() const;
  void _internal_set_generation_policy(::orm::GenerationPolicy value);
  public:

  // @@protoc_insertion_point(class_scope:orm.FieldOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr storage_type_;
    int generation_policy_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_object_5fbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectMeta_ACLEntry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orm.ObjectMeta.ACLEntry) */ {
 public:
  inline ObjectMeta_ACLEntry() : ObjectMeta_ACLEntry(nullptr) {}
  ~ObjectMeta_ACLEntry() override;
  explicit PROTOBUF_CONSTEXPR ObjectMeta_ACLEntry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectMeta_ACLEntry(const ObjectMeta_ACLEntry& from);
  ObjectMeta_ACLEntry(ObjectMeta_ACLEntry&& from) noexcept
    : ObjectMeta_ACLEntry() {
    *this = ::std::move(from);
  }

  inline ObjectMeta_ACLEntry& operator=(const ObjectMeta_ACLEntry& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectMeta_ACLEntry& operator=(ObjectMeta_ACLEntry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectMeta_ACLEntry& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectMeta_ACLEntry* internal_default_instance() {
    return reinterpret_cast<const ObjectMeta_ACLEntry*>(
               &_ObjectMeta_ACLEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ObjectMeta_ACLEntry& a, ObjectMeta_ACLEntry& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectMeta_ACLEntry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectMeta_ACLEntry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectMeta_ACLEntry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectMeta_ACLEntry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectMeta_ACLEntry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectMeta_ACLEntry& from) {
    ObjectMeta_ACLEntry::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectMeta_ACLEntry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orm.ObjectMeta.ACLEntry";
  }
  protected:
  explicit ObjectMeta_ACLEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ObjectMeta_ACLEntry_Permission Permission;
  static constexpr Permission NONE =
    ObjectMeta_ACLEntry_Permission_NONE;
  static constexpr Permission READ =
    ObjectMeta_ACLEntry_Permission_READ;
  static constexpr Permission WRITE =
    ObjectMeta_ACLEntry_Permission_WRITE;
  static constexpr Permission ADMIN =
    ObjectMeta_ACLEntry_Permission_ADMIN;
  static inline bool Permission_IsValid(int value) {
    return ObjectMeta_ACLEntry_Permission_IsValid(value);
  }
  static constexpr Permission Permission_MIN =
    ObjectMeta_ACLEntry_Permission_Permission_MIN;
  static constexpr Permission Permission_MAX =
    ObjectMeta_ACLEntry_Permission_Permission_MAX;
  static constexpr int Permission_ARRAYSIZE =
    ObjectMeta_ACLEntry_Permission_Permission_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Permission_descriptor() {
    return ObjectMeta_ACLEntry_Permission_descriptor();
  }
  template<typename T>
  static inline const std::string& Permission_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Permission>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Permission_Name.");
    return ObjectMeta_ACLEntry_Permission_Name(enum_t_value);
  }
  static inline bool Permission_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Permission* value) {
    return ObjectMeta_ACLEntry_Permission_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPrincipalFieldNumber = 1,
    kPermissionFieldNumber = 2,
  };
  // string principal = 1;
  void clear_principal();
  const std::string& principal() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_principal(ArgT0&& arg0, ArgT... args);
  std::string* mutable_principal();
  PROTOBUF_NODISCARD std::string* release_principal();
  void set_allocated_principal(std::string* principal);
  private:
  const std::string& _internal_principal() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_principal(const std::string& value);
  std::string* _internal_mutable_principal();
  public:

  // .orm.ObjectMeta.ACLEntry.Permission permission = 2;
  void clear_permission();
  ::orm::ObjectMeta_ACLEntry_Permission permission() const;
  void set_permission(::orm::ObjectMeta_ACLEntry_Permission value);
  private:
  ::orm::ObjectMeta_ACLEntry_Permission _internal_permission() const;
  void _internal_set_permission(::orm::ObjectMeta_ACLEntry_Permission value);
  public:

  // @@protoc_insertion_point(class_scope:orm.ObjectMeta.ACLEntry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr principal_;
    int permission_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_object_5fbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:orm.ObjectMeta) */ {
 public:
  inline ObjectMeta() : ObjectMeta(nullptr) {}
  ~ObjectMeta() override;
  explicit PROTOBUF_CONSTEXPR ObjectMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectMeta(const ObjectMeta& from);
  ObjectMeta(ObjectMeta&& from) noexcept
    : ObjectMeta() {
    *this = ::std::move(from);
  }

  inline ObjectMeta& operator=(const ObjectMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectMeta& operator=(ObjectMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectMeta* internal_default_instance() {
    return reinterpret_cast<const ObjectMeta*>(
               &_ObjectMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ObjectMeta& a, ObjectMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ObjectMeta& from) {
    ObjectMeta::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "orm.ObjectMeta";
  }
  protected:
  explicit ObjectMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ObjectMeta_ACLEntry ACLEntry;

  // accessors -------------------------------------------------------

  enum : int {
    kAclFieldNumber = 4,
    kIdFieldNumber = 1,
    kParentIdFieldNumber = 2,
    kParentTypeFieldNumber = 3,
    kCreatedByFieldNumber = 7,
    kUpdatedByFieldNumber = 8,
    kVersionFieldNumber = 9,
    kCreatedAtFieldNumber = 5,
    kUpdatedAtFieldNumber = 6,
  };
  // repeated .orm.ObjectMeta.ACLEntry acl = 4;
  int acl_size() const;
  private:
  int _internal_acl_size() const;
  public:
  void clear_acl();
  ::orm::ObjectMeta_ACLEntry* mutable_acl(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orm::ObjectMeta_ACLEntry >*
      mutable_acl();
  private:
  const ::orm::ObjectMeta_ACLEntry& _internal_acl(int index) const;
  ::orm::ObjectMeta_ACLEntry* _internal_add_acl();
  public:
  const ::orm::ObjectMeta_ACLEntry& acl(int index) const;
  ::orm::ObjectMeta_ACLEntry* add_acl();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orm::ObjectMeta_ACLEntry >&
      acl() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string parent_id = 2;
  void clear_parent_id();
  const std::string& parent_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent_id();
  PROTOBUF_NODISCARD std::string* release_parent_id();
  void set_allocated_parent_id(std::string* parent_id);
  private:
  const std::string& _internal_parent_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_id(const std::string& value);
  std::string* _internal_mutable_parent_id();
  public:

  // string parent_type = 3;
  void clear_parent_type();
  const std::string& parent_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parent_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parent_type();
  PROTOBUF_NODISCARD std::string* release_parent_type();
  void set_allocated_parent_type(std::string* parent_type);
  private:
  const std::string& _internal_parent_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent_type(const std::string& value);
  std::string* _internal_mutable_parent_type();
  public:

  // string created_by = 7;
  void clear_created_by();
  const std::string& created_by() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_created_by(ArgT0&& arg0, ArgT... args);
  std::string* mutable_created_by();
  PROTOBUF_NODISCARD std::string* release_created_by();
  void set_allocated_created_by(std::string* created_by);
  private:
  const std::string& _internal_created_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_created_by(const std::string& value);
  std::string* _internal_mutable_created_by();
  public:

  // string updated_by = 8;
  void clear_updated_by();
  const std::string& updated_by() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_updated_by(ArgT0&& arg0, ArgT... args);
  std::string* mutable_updated_by();
  PROTOBUF_NODISCARD std::string* release_updated_by();
  void set_allocated_updated_by(std::string* updated_by);
  private:
  const std::string& _internal_updated_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_updated_by(const std::string& value);
  std::string* _internal_mutable_updated_by();
  public:

  // string version = 9;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // int64 created_at = 5;
  void clear_created_at();
  int64_t created_at() const;
  void set_created_at(int64_t value);
  private:
  int64_t _internal_created_at() const;
  void _internal_set_created_at(int64_t value);
  public:

  // int64 updated_at = 6;
  void clear_updated_at();
  int64_t updated_at() const;
  void set_updated_at(int64_t value);
  private:
  int64_t _internal_updated_at() const;
  void _internal_set_updated_at(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:orm.ObjectMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orm::ObjectMeta_ACLEntry > acl_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_type_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr created_by_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updated_by_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
    int64_t created_at_;
    int64_t updated_at_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_object_5fbase_2eproto;
};
// ===================================================================

static const int kObjectTypeFieldNumber = 50000;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::orm::ObjectTypeOptions >, 11, false >
  object_type;
static const int kFieldOptionsFieldNumber = 50001;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::FieldOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::orm::FieldOptions >, 11, false >
  field_options;
static const int kInPlaceFieldNumber = 50002;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  in_place;
static const int kMessageLockGroupFieldNumber = 50003;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MessageOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::StringTypeTraits, 9, false >
  message_lock_group;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjectTypeOptions

// string camel_case_name = 1;
inline void ObjectTypeOptions::clear_camel_case_name() {
  _impl_.camel_case_name_.ClearToEmpty();
}
inline const std::string& ObjectTypeOptions::camel_case_name() const {
  // @@protoc_insertion_point(field_get:orm.ObjectTypeOptions.camel_case_name)
  return _internal_camel_case_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectTypeOptions::set_camel_case_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.camel_case_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orm.ObjectTypeOptions.camel_case_name)
}
inline std::string* ObjectTypeOptions::mutable_camel_case_name() {
  std::string* _s = _internal_mutable_camel_case_name();
  // @@protoc_insertion_point(field_mutable:orm.ObjectTypeOptions.camel_case_name)
  return _s;
}
inline const std::string& ObjectTypeOptions::_internal_camel_case_name() const {
  return _impl_.camel_case_name_.Get();
}
inline void ObjectTypeOptions::_internal_set_camel_case_name(const std::string& value) {
  
  _impl_.camel_case_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectTypeOptions::_internal_mutable_camel_case_name() {
  
  return _impl_.camel_case_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectTypeOptions::release_camel_case_name() {
  // @@protoc_insertion_point(field_release:orm.ObjectTypeOptions.camel_case_name)
  return _impl_.camel_case_name_.Release();
}
inline void ObjectTypeOptions::set_allocated_camel_case_name(std::string* camel_case_name) {
  if (camel_case_name != nullptr) {
    
  } else {
    
  }
  _impl_.camel_case_name_.SetAllocated(camel_case_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.camel_case_name_.IsDefault()) {
    _impl_.camel_case_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orm.ObjectTypeOptions.camel_case_name)
}

// string snake_case_name = 2;
inline void ObjectTypeOptions::clear_snake_case_name() {
  _impl_.snake_case_name_.ClearToEmpty();
}
inline const std::string& ObjectTypeOptions::snake_case_name() const {
  // @@protoc_insertion_point(field_get:orm.ObjectTypeOptions.snake_case_name)
  return _internal_snake_case_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectTypeOptions::set_snake_case_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.snake_case_name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orm.ObjectTypeOptions.snake_case_name)
}
inline std::string* ObjectTypeOptions::mutable_snake_case_name() {
  std::string* _s = _internal_mutable_snake_case_name();
  // @@protoc_insertion_point(field_mutable:orm.ObjectTypeOptions.snake_case_name)
  return _s;
}
inline const std::string& ObjectTypeOptions::_internal_snake_case_name() const {
  return _impl_.snake_case_name_.Get();
}
inline void ObjectTypeOptions::_internal_set_snake_case_name(const std::string& value) {
  
  _impl_.snake_case_name_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectTypeOptions::_internal_mutable_snake_case_name() {
  
  return _impl_.snake_case_name_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectTypeOptions::release_snake_case_name() {
  // @@protoc_insertion_point(field_release:orm.ObjectTypeOptions.snake_case_name)
  return _impl_.snake_case_name_.Release();
}
inline void ObjectTypeOptions::set_allocated_snake_case_name(std::string* snake_case_name) {
  if (snake_case_name != nullptr) {
    
  } else {
    
  }
  _impl_.snake_case_name_.SetAllocated(snake_case_name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.snake_case_name_.IsDefault()) {
    _impl_.snake_case_name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orm.ObjectTypeOptions.snake_case_name)
}

// bool custom_type_handler = 4;
inline void ObjectTypeOptions::clear_custom_type_handler() {
  _impl_.custom_type_handler_ = false;
}
inline bool ObjectTypeOptions::_internal_custom_type_handler() const {
  return _impl_.custom_type_handler_;
}
inline bool ObjectTypeOptions::custom_type_handler() const {
  // @@protoc_insertion_point(field_get:orm.ObjectTypeOptions.custom_type_handler)
  return _internal_custom_type_handler();
}
inline void ObjectTypeOptions::_internal_set_custom_type_handler(bool value) {
  
  _impl_.custom_type_handler_ = value;
}
inline void ObjectTypeOptions::set_custom_type_handler(bool value) {
  _internal_set_custom_type_handler(value);
  // @@protoc_insertion_point(field_set:orm.ObjectTypeOptions.custom_type_handler)
}

// int32 type_value = 5;
inline void ObjectTypeOptions::clear_type_value() {
  _impl_.type_value_ = 0;
}
inline int32_t ObjectTypeOptions::_internal_type_value() const {
  return _impl_.type_value_;
}
inline int32_t ObjectTypeOptions::type_value() const {
  // @@protoc_insertion_point(field_get:orm.ObjectTypeOptions.type_value)
  return _internal_type_value();
}
inline void ObjectTypeOptions::_internal_set_type_value(int32_t value) {
  
  _impl_.type_value_ = value;
}
inline void ObjectTypeOptions::set_type_value(int32_t value) {
  _internal_set_type_value(value);
  // @@protoc_insertion_point(field_set:orm.ObjectTypeOptions.type_value)
}

// -------------------------------------------------------------------

// FieldOptions

// .orm.GenerationPolicy generation_policy = 1;
inline void FieldOptions::clear_generation_policy() {
  _impl_.generation_policy_ = 0;
}
inline ::orm::GenerationPolicy FieldOptions::_internal_generation_policy() const {
  return static_cast< ::orm::GenerationPolicy >(_impl_.generation_policy_);
}
inline ::orm::GenerationPolicy FieldOptions::generation_policy() const {
  // @@protoc_insertion_point(field_get:orm.FieldOptions.generation_policy)
  return _internal_generation_policy();
}
inline void FieldOptions::_internal_set_generation_policy(::orm::GenerationPolicy value) {
  
  _impl_.generation_policy_ = value;
}
inline void FieldOptions::set_generation_policy(::orm::GenerationPolicy value) {
  _internal_set_generation_policy(value);
  // @@protoc_insertion_point(field_set:orm.FieldOptions.generation_policy)
}

// string storage_type = 2;
inline void FieldOptions::clear_storage_type() {
  _impl_.storage_type_.ClearToEmpty();
}
inline const std::string& FieldOptions::storage_type() const {
  // @@protoc_insertion_point(field_get:orm.FieldOptions.storage_type)
  return _internal_storage_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldOptions::set_storage_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.storage_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orm.FieldOptions.storage_type)
}
inline std::string* FieldOptions::mutable_storage_type() {
  std::string* _s = _internal_mutable_storage_type();
  // @@protoc_insertion_point(field_mutable:orm.FieldOptions.storage_type)
  return _s;
}
inline const std::string& FieldOptions::_internal_storage_type() const {
  return _impl_.storage_type_.Get();
}
inline void FieldOptions::_internal_set_storage_type(const std::string& value) {
  
  _impl_.storage_type_.Set(value, GetArenaForAllocation());
}
inline std::string* FieldOptions::_internal_mutable_storage_type() {
  
  return _impl_.storage_type_.Mutable(GetArenaForAllocation());
}
inline std::string* FieldOptions::release_storage_type() {
  // @@protoc_insertion_point(field_release:orm.FieldOptions.storage_type)
  return _impl_.storage_type_.Release();
}
inline void FieldOptions::set_allocated_storage_type(std::string* storage_type) {
  if (storage_type != nullptr) {
    
  } else {
    
  }
  _impl_.storage_type_.SetAllocated(storage_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.storage_type_.IsDefault()) {
    _impl_.storage_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orm.FieldOptions.storage_type)
}

// -------------------------------------------------------------------

// ObjectMeta_ACLEntry

// string principal = 1;
inline void ObjectMeta_ACLEntry::clear_principal() {
  _impl_.principal_.ClearToEmpty();
}
inline const std::string& ObjectMeta_ACLEntry::principal() const {
  // @@protoc_insertion_point(field_get:orm.ObjectMeta.ACLEntry.principal)
  return _internal_principal();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectMeta_ACLEntry::set_principal(ArgT0&& arg0, ArgT... args) {
 
 _impl_.principal_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orm.ObjectMeta.ACLEntry.principal)
}
inline std::string* ObjectMeta_ACLEntry::mutable_principal() {
  std::string* _s = _internal_mutable_principal();
  // @@protoc_insertion_point(field_mutable:orm.ObjectMeta.ACLEntry.principal)
  return _s;
}
inline const std::string& ObjectMeta_ACLEntry::_internal_principal() const {
  return _impl_.principal_.Get();
}
inline void ObjectMeta_ACLEntry::_internal_set_principal(const std::string& value) {
  
  _impl_.principal_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectMeta_ACLEntry::_internal_mutable_principal() {
  
  return _impl_.principal_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectMeta_ACLEntry::release_principal() {
  // @@protoc_insertion_point(field_release:orm.ObjectMeta.ACLEntry.principal)
  return _impl_.principal_.Release();
}
inline void ObjectMeta_ACLEntry::set_allocated_principal(std::string* principal) {
  if (principal != nullptr) {
    
  } else {
    
  }
  _impl_.principal_.SetAllocated(principal, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.principal_.IsDefault()) {
    _impl_.principal_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orm.ObjectMeta.ACLEntry.principal)
}

// .orm.ObjectMeta.ACLEntry.Permission permission = 2;
inline void ObjectMeta_ACLEntry::clear_permission() {
  _impl_.permission_ = 0;
}
inline ::orm::ObjectMeta_ACLEntry_Permission ObjectMeta_ACLEntry::_internal_permission() const {
  return static_cast< ::orm::ObjectMeta_ACLEntry_Permission >(_impl_.permission_);
}
inline ::orm::ObjectMeta_ACLEntry_Permission ObjectMeta_ACLEntry::permission() const {
  // @@protoc_insertion_point(field_get:orm.ObjectMeta.ACLEntry.permission)
  return _internal_permission();
}
inline void ObjectMeta_ACLEntry::_internal_set_permission(::orm::ObjectMeta_ACLEntry_Permission value) {
  
  _impl_.permission_ = value;
}
inline void ObjectMeta_ACLEntry::set_permission(::orm::ObjectMeta_ACLEntry_Permission value) {
  _internal_set_permission(value);
  // @@protoc_insertion_point(field_set:orm.ObjectMeta.ACLEntry.permission)
}

// -------------------------------------------------------------------

// ObjectMeta

// string id = 1;
inline void ObjectMeta::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& ObjectMeta::id() const {
  // @@protoc_insertion_point(field_get:orm.ObjectMeta.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectMeta::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orm.ObjectMeta.id)
}
inline std::string* ObjectMeta::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:orm.ObjectMeta.id)
  return _s;
}
inline const std::string& ObjectMeta::_internal_id() const {
  return _impl_.id_.Get();
}
inline void ObjectMeta::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectMeta::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectMeta::release_id() {
  // @@protoc_insertion_point(field_release:orm.ObjectMeta.id)
  return _impl_.id_.Release();
}
inline void ObjectMeta::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orm.ObjectMeta.id)
}

// string parent_id = 2;
inline void ObjectMeta::clear_parent_id() {
  _impl_.parent_id_.ClearToEmpty();
}
inline const std::string& ObjectMeta::parent_id() const {
  // @@protoc_insertion_point(field_get:orm.ObjectMeta.parent_id)
  return _internal_parent_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectMeta::set_parent_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orm.ObjectMeta.parent_id)
}
inline std::string* ObjectMeta::mutable_parent_id() {
  std::string* _s = _internal_mutable_parent_id();
  // @@protoc_insertion_point(field_mutable:orm.ObjectMeta.parent_id)
  return _s;
}
inline const std::string& ObjectMeta::_internal_parent_id() const {
  return _impl_.parent_id_.Get();
}
inline void ObjectMeta::_internal_set_parent_id(const std::string& value) {
  
  _impl_.parent_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectMeta::_internal_mutable_parent_id() {
  
  return _impl_.parent_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectMeta::release_parent_id() {
  // @@protoc_insertion_point(field_release:orm.ObjectMeta.parent_id)
  return _impl_.parent_id_.Release();
}
inline void ObjectMeta::set_allocated_parent_id(std::string* parent_id) {
  if (parent_id != nullptr) {
    
  } else {
    
  }
  _impl_.parent_id_.SetAllocated(parent_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_id_.IsDefault()) {
    _impl_.parent_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orm.ObjectMeta.parent_id)
}

// string parent_type = 3;
inline void ObjectMeta::clear_parent_type() {
  _impl_.parent_type_.ClearToEmpty();
}
inline const std::string& ObjectMeta::parent_type() const {
  // @@protoc_insertion_point(field_get:orm.ObjectMeta.parent_type)
  return _internal_parent_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectMeta::set_parent_type(ArgT0&& arg0, ArgT... args) {
 
 _impl_.parent_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orm.ObjectMeta.parent_type)
}
inline std::string* ObjectMeta::mutable_parent_type() {
  std::string* _s = _internal_mutable_parent_type();
  // @@protoc_insertion_point(field_mutable:orm.ObjectMeta.parent_type)
  return _s;
}
inline const std::string& ObjectMeta::_internal_parent_type() const {
  return _impl_.parent_type_.Get();
}
inline void ObjectMeta::_internal_set_parent_type(const std::string& value) {
  
  _impl_.parent_type_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectMeta::_internal_mutable_parent_type() {
  
  return _impl_.parent_type_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectMeta::release_parent_type() {
  // @@protoc_insertion_point(field_release:orm.ObjectMeta.parent_type)
  return _impl_.parent_type_.Release();
}
inline void ObjectMeta::set_allocated_parent_type(std::string* parent_type) {
  if (parent_type != nullptr) {
    
  } else {
    
  }
  _impl_.parent_type_.SetAllocated(parent_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.parent_type_.IsDefault()) {
    _impl_.parent_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orm.ObjectMeta.parent_type)
}

// repeated .orm.ObjectMeta.ACLEntry acl = 4;
inline int ObjectMeta::_internal_acl_size() const {
  return _impl_.acl_.size();
}
inline int ObjectMeta::acl_size() const {
  return _internal_acl_size();
}
inline void ObjectMeta::clear_acl() {
  _impl_.acl_.Clear();
}
inline ::orm::ObjectMeta_ACLEntry* ObjectMeta::mutable_acl(int index) {
  // @@protoc_insertion_point(field_mutable:orm.ObjectMeta.acl)
  return _impl_.acl_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orm::ObjectMeta_ACLEntry >*
ObjectMeta::mutable_acl() {
  // @@protoc_insertion_point(field_mutable_list:orm.ObjectMeta.acl)
  return &_impl_.acl_;
}
inline const ::orm::ObjectMeta_ACLEntry& ObjectMeta::_internal_acl(int index) const {
  return _impl_.acl_.Get(index);
}
inline const ::orm::ObjectMeta_ACLEntry& ObjectMeta::acl(int index) const {
  // @@protoc_insertion_point(field_get:orm.ObjectMeta.acl)
  return _internal_acl(index);
}
inline ::orm::ObjectMeta_ACLEntry* ObjectMeta::_internal_add_acl() {
  return _impl_.acl_.Add();
}
inline ::orm::ObjectMeta_ACLEntry* ObjectMeta::add_acl() {
  ::orm::ObjectMeta_ACLEntry* _add = _internal_add_acl();
  // @@protoc_insertion_point(field_add:orm.ObjectMeta.acl)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::orm::ObjectMeta_ACLEntry >&
ObjectMeta::acl() const {
  // @@protoc_insertion_point(field_list:orm.ObjectMeta.acl)
  return _impl_.acl_;
}

// int64 created_at = 5;
inline void ObjectMeta::clear_created_at() {
  _impl_.created_at_ = int64_t{0};
}
inline int64_t ObjectMeta::_internal_created_at() const {
  return _impl_.created_at_;
}
inline int64_t ObjectMeta::created_at() const {
  // @@protoc_insertion_point(field_get:orm.ObjectMeta.created_at)
  return _internal_created_at();
}
inline void ObjectMeta::_internal_set_created_at(int64_t value) {
  
  _impl_.created_at_ = value;
}
inline void ObjectMeta::set_created_at(int64_t value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:orm.ObjectMeta.created_at)
}

// int64 updated_at = 6;
inline void ObjectMeta::clear_updated_at() {
  _impl_.updated_at_ = int64_t{0};
}
inline int64_t ObjectMeta::_internal_updated_at() const {
  return _impl_.updated_at_;
}
inline int64_t ObjectMeta::updated_at() const {
  // @@protoc_insertion_point(field_get:orm.ObjectMeta.updated_at)
  return _internal_updated_at();
}
inline void ObjectMeta::_internal_set_updated_at(int64_t value) {
  
  _impl_.updated_at_ = value;
}
inline void ObjectMeta::set_updated_at(int64_t value) {
  _internal_set_updated_at(value);
  // @@protoc_insertion_point(field_set:orm.ObjectMeta.updated_at)
}

// string created_by = 7;
inline void ObjectMeta::clear_created_by() {
  _impl_.created_by_.ClearToEmpty();
}
inline const std::string& ObjectMeta::created_by() const {
  // @@protoc_insertion_point(field_get:orm.ObjectMeta.created_by)
  return _internal_created_by();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectMeta::set_created_by(ArgT0&& arg0, ArgT... args) {
 
 _impl_.created_by_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orm.ObjectMeta.created_by)
}
inline std::string* ObjectMeta::mutable_created_by() {
  std::string* _s = _internal_mutable_created_by();
  // @@protoc_insertion_point(field_mutable:orm.ObjectMeta.created_by)
  return _s;
}
inline const std::string& ObjectMeta::_internal_created_by() const {
  return _impl_.created_by_.Get();
}
inline void ObjectMeta::_internal_set_created_by(const std::string& value) {
  
  _impl_.created_by_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectMeta::_internal_mutable_created_by() {
  
  return _impl_.created_by_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectMeta::release_created_by() {
  // @@protoc_insertion_point(field_release:orm.ObjectMeta.created_by)
  return _impl_.created_by_.Release();
}
inline void ObjectMeta::set_allocated_created_by(std::string* created_by) {
  if (created_by != nullptr) {
    
  } else {
    
  }
  _impl_.created_by_.SetAllocated(created_by, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.created_by_.IsDefault()) {
    _impl_.created_by_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orm.ObjectMeta.created_by)
}

// string updated_by = 8;
inline void ObjectMeta::clear_updated_by() {
  _impl_.updated_by_.ClearToEmpty();
}
inline const std::string& ObjectMeta::updated_by() const {
  // @@protoc_insertion_point(field_get:orm.ObjectMeta.updated_by)
  return _internal_updated_by();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectMeta::set_updated_by(ArgT0&& arg0, ArgT... args) {
 
 _impl_.updated_by_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orm.ObjectMeta.updated_by)
}
inline std::string* ObjectMeta::mutable_updated_by() {
  std::string* _s = _internal_mutable_updated_by();
  // @@protoc_insertion_point(field_mutable:orm.ObjectMeta.updated_by)
  return _s;
}
inline const std::string& ObjectMeta::_internal_updated_by() const {
  return _impl_.updated_by_.Get();
}
inline void ObjectMeta::_internal_set_updated_by(const std::string& value) {
  
  _impl_.updated_by_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectMeta::_internal_mutable_updated_by() {
  
  return _impl_.updated_by_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectMeta::release_updated_by() {
  // @@protoc_insertion_point(field_release:orm.ObjectMeta.updated_by)
  return _impl_.updated_by_.Release();
}
inline void ObjectMeta::set_allocated_updated_by(std::string* updated_by) {
  if (updated_by != nullptr) {
    
  } else {
    
  }
  _impl_.updated_by_.SetAllocated(updated_by, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.updated_by_.IsDefault()) {
    _impl_.updated_by_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orm.ObjectMeta.updated_by)
}

// string version = 9;
inline void ObjectMeta::clear_version() {
  _impl_.version_.ClearToEmpty();
}
inline const std::string& ObjectMeta::version() const {
  // @@protoc_insertion_point(field_get:orm.ObjectMeta.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectMeta::set_version(ArgT0&& arg0, ArgT... args) {
 
 _impl_.version_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:orm.ObjectMeta.version)
}
inline std::string* ObjectMeta::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:orm.ObjectMeta.version)
  return _s;
}
inline const std::string& ObjectMeta::_internal_version() const {
  return _impl_.version_.Get();
}
inline void ObjectMeta::_internal_set_version(const std::string& value) {
  
  _impl_.version_.Set(value, GetArenaForAllocation());
}
inline std::string* ObjectMeta::_internal_mutable_version() {
  
  return _impl_.version_.Mutable(GetArenaForAllocation());
}
inline std::string* ObjectMeta::release_version() {
  // @@protoc_insertion_point(field_release:orm.ObjectMeta.version)
  return _impl_.version_.Release();
}
inline void ObjectMeta::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  _impl_.version_.SetAllocated(version, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.version_.IsDefault()) {
    _impl_.version_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:orm.ObjectMeta.version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace orm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::orm::ObjectMeta_ACLEntry_Permission> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::orm::ObjectMeta_ACLEntry_Permission>() {
  return ::orm::ObjectMeta_ACLEntry_Permission_descriptor();
}
template <> struct is_proto_enum< ::orm::GenerationPolicy> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::orm::GenerationPolicy>() {
  return ::orm::GenerationPolicy_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_object_5fbase_2eproto
